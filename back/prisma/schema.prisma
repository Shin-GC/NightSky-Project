generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model challenge {
  id                       Int              @id @default(autoincrement())
  name                     String?          @db.VarChar(50)
  duration                 Int?
  description              String?          @db.TinyText
  reward                   String?          @db.TinyText
  inserted_at              DateTime?        @db.Timestamp(0)
  type                     Int?
  descriptionOne           String?          @db.VarChar(100)
  descriptionTwo           String?          @db.VarChar(100)
  subtitle                 String?          @db.VarChar(100)
  reward_challengeToreward reward[]
  user_challenge           user_challenge[]
  user_rewards             user_rewards[]
}

model diary {
  id      Int       @id @default(autoincrement())
  user_id Int?
  text    String    @db.Text
  title   String    @db.VarChar(50)
  tag     String?   @db.VarChar(50)
  date    DateTime? @default(now()) @db.Timestamp(0)
  view    Int?      @default(1)
  deleted Boolean?  @default(false)
  emotion String    @db.VarChar(10)
  book_id Int?
  book    book?     @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "diary_ibfk_2")
  users   users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "diary_ibfk_1")

  @@index([user_id], map: "user_id")
  @@index([book_id], map: "book_id")
}

model fortune {
  id   Int     @id @default(autoincrement())
  text String? @db.TinyText
}

model question {
  id      Int     @id @default(autoincrement())
  text    String? @db.TinyText
  emotion String? @db.VarChar(10)
}

model user_challenge {
  id           Int        @id @default(autoincrement())
  user_id      Int?
  challenge_id Int?
  start_date   DateTime?  @default(now()) @db.Timestamp(0)
  end_date     DateTime?  @db.Timestamp(0)
  is_completed Boolean?
  is_broken    Boolean?
  type         Int?
  challenge    challenge? @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_challenge_ibfk_2")
  users        users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_challenge_ibfk_1")

  @@index([challenge_id], map: "challenge_id")
  @@index([user_id], map: "user_id")
}

model users {
  id             Int              @id @default(autoincrement())
  email          String?          @db.VarChar(50)
  pw             String?          @db.VarChar(256)
  social         String?          @db.VarChar(10)
  inserted_at    DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @updatedAt @db.Timestamp(0)
  name           String?          @db.VarChar(10)
  daily_check    Boolean?         @default(false)
  book           book[]
  diary          diary[]
  user_challenge user_challenge[]
  user_rewards   user_rewards[]
}

model reward {
  id           Int            @id @default(autoincrement())
  challenge_id Int
  insereted_at String         @db.VarChar(25)
  type         Int?
  duration     Int?
  reward       String?        @db.VarChar(30)
  challenge    challenge      @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reward_ibfk_1")
  user_rewards user_rewards[]

  @@index([challenge_id], map: "challenge_id")
}

model user_rewards {
  id           Int       @id @default(autoincrement())
  user_id      Int
  challenge_id Int
  reward_id    Int
  challenge    challenge @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_rewards_ibfk_2")
  reward       reward    @relation(fields: [reward_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_rewards_ibfk_3")
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_rewards_ibfk_1")

  @@index([user_id], map: "user_id")
  @@index([challenge_id], map: "challenge_id")
  @@index([reward_id], map: "reward_id")
}

model activity {
  id      Int     @id @default(autoincrement())
  title   String? @db.VarChar(25)
  emotion String? @db.VarChar(25)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model music {
  id     Int?
  title  String? @db.VarChar(60)
  artist String? @db.VarChar(34)
  genre  String? @db.VarChar(6)

  @@ignore
}

model book {
  id          Int       @id @default(autoincrement())
  user_id     Int
  image       String?   @default("https://ai-project-last.s3.ap-northeast-2.amazonaws.com/defaultImage/nightSky.jpg") @db.VarChar(255)
  color       String?   @default("#d0ebff") @db.VarChar(50)
  name        String?   @db.VarChar(50)
  inserted_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "book_ibfk_1")
  diary       diary[]

  @@unique([id, user_id], name: "idUserId")
  @@index([user_id], map: "book_ibfk_1")
}
